<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">

<%# <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <h1 class="navbar-brand">Migrating Rails From RDS to Vitess</a>
</nav> %>
<header class="masthead mb-5">
  <div class="container h-100">
    <div class="row h-100 align-items-center">
      <div class="col-12 text-center">
        <h1 class="fw-light display-3">Scaling Databases with Vitess</h1>
        <p class="lead">Harshit Gangal and Manan Gupta</p>
      </div>
    </div>
  </div>
</header>

<div class="container w-75 mw-100">
  <div class="row">
    <div class="col">
      <div class="card">
        <div class="card-body">
          <h2 class="card-title">Total User Count</h2>
          <h3 class="card-subtitle mb-2 text-muted">Number of rows in the users table</h3>
          <h3 class="card-text" id="userCount">0</h3>
        </div>
      </div>
    </div>
    <div class="col">
      <div class="card">
        <div class="card-body">
          <h2 class="card-title">Total Error Count</h2>
          <h3 class="card-subtitle mb-2 text-muted">Number of errors seen</h3>
          <h3 class="card-text" id="errorCount">0</h3>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col">
        <canvas id="latencyChart"></canvas>
    </div>
  </div>
</div>

<script>
const ctx = document.getElementById('latencyChart');
const latencyChart = new Chart(ctx, {
    type: 'line',
    data: {
        datasets: [{
            label: 'Latency of insert queries',
            backgroundColor: 'rgba(13,103,52,255)',
            borderColor: 'rgba(246,150,30,255)',
            tension: 0.1
        }]
    },
    options: {
        scales: {
            y: {
                beginAtZero: true
            },
        },
        responsive: true
    }
});

var totalError = 0;
var totalLatency = 0;
var countPoints = 0;

function insertUserLatency(label, data) {
  if (latencyChart.data.labels.length == 60) {
    removeOneDataPoint()
  }
  console.log()
  latencyChart.data.labels.push(label);
  latencyChart.data.datasets.forEach((dataset) => {
      dataset.data.push(data);
  });
  latencyChart.update();
}

function removeOneDataPoint(chart) {
  latencyChart.data.labels.shift();
  latencyChart.data.datasets.forEach((dataset) => {
      dataset.data.shift();
  });
  latencyChart.update();
}
 

function insertUser() {
  var startTime = performance.now()
  var userData = {name:"Username"};

  Rails.ajax({
    type: "POST",
    url: "/users",
    async: false,
    data: userData,
    success: function(data) {
      var endTime = performance.now()
      totalLatency += endTime - startTime;
      countPoints += 1;
      // console.log(`totLatency - ${totalLatency} and countPOints = ${countPoints}`);
    },
    error: function(data) {
      var endTime = performance.now()
      totalLatency += endTime - startTime;
      countPoints += 1;
      totalError += 1;
      document.getElementById('errorCount').innerHTML=`${totalError}`
    }
  })  
}

function updateTotalUserCount(){
  Rails.ajax({
    type: "GET",
    url: "/gettotalcount",
    success: function(data) {
      document.getElementById('userCount').innerHTML=`${data}`
    }
  })
}

function publishMaxLatency(){
  timeNow = new Date();
  insertUserLatency(timeNow.toLocaleTimeString(), totalLatency/countPoints)
  totalLatency = 0;
  countPoints = 0;
}

updateTotalUserCount()
setInterval(insertUser, 250);
setInterval(updateTotalUserCount, 250);
setInterval(publishMaxLatency, 5100);
</script>